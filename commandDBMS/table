#! /bin/bash


callDBManagementSystem() {
    ~/DBMS-Bash/dbms
}
connectedDbs=$1
function validateArgument {
    if [ -z "$1" ]
    then
        echo "The name field cannot be left empty"
        return 1
    elif [[ "$1" =~ ^[0-9] ]]
    then
        echo "Name should not begin with a number"
        return 1
    elif [[ "$1" = *" "* ]]
    then
        echo "Name Shouldn't Have Spaces"
        return 1
    elif [[ "$1" =~ [^a-zA-Z0-9_] ]]
    then
        echo "Name Shouldn't Have Special Characters"
        return 1
    fi
}

# function to create table
ps3="Enter Option"
createTable(){
	local db_dir="$connectedDbs"
    local tablename
    local col_name
    local col_type
    local is_pk
    local add_more
    local pk_col

    read -p "Enter the name of the table: " tablename
    tablename=$(echo "$tablename" | tr ' ' '_')

    if [[ ! "$tablename" =~ ^[a-zA-Z][a-zA-Z0-9_]*$ ]]; then
        echo "Invalid table name. It should start with a letter and contain only letters, numbers, and underscores."
        return
    fi

    if [ -e ./"$db_dir/$tablename" ]; then
        echo "Table already exists!"
        return
    fi

    touch ./"$db_dir/$tablename"
    touch ./"$db_dir/$tablename.meta"

    pk_col=""

    while true; do
        read -p "Enter the name of the column: " col_name
        col_name=$(echo "$col_name" | tr ' ' '_')
        if [[ ! "$col_name" =~ ^[a-zA-Z][a-zA-Z0-9_]*$ ]]; then
            echo "Invalid column name. It should start with a letter and contain only letters, numbers, and underscores."
            continue
        fi

        read -p "Enter the datatype of the column (int/string): " col_type
        if [[ "$col_type" != "int" && "$col_type" != "string" ]]; then
            echo "Invalid datatype. Please enter 'int' or 'string'."
            continue
        fi

        

        read -p "Is $col_name a primary key? (yes/no): " is_pk
        if [[ "$is_pk" != "yes" && "$is_pk" != "no" ]]; then
            echo "Invalid option. Please enter 'yes' or 'no'."
            continue
        fi

        if [[ "$is_pk" == "yes" ]]; then
            if [[ -n "$pk_col" ]]; then
                echo "A primary key already exists. Only one primary key is allowed."
                continue
            else
                pk_col=$col_name
				echo "$col_name:$col_type" >> ./"$db_dir/$tablename.meta"
                sed -i "/primary_key/d" ./"$db_dir/$tablename.meta"
                echo "primary_key:$pk_col" >> ./"$db_dir/$tablename.meta"
            fi
		else
				echo "$col_name:$col_type" >> ./"$db_dir/$tablename.meta"
        fi

		 while true; do
            read -p "Do you want to add more columns? (yes/no): " add_more
            case "$add_more" in
                yes)
                    break
                    ;;
                no)
                    echo "Finished adding columns."
					echo "Table $tablename created successfully."
                    return
                    ;;
                *)
                    echo "Invalid option. Please enter 'yes' or 'no'."
                    ;;
            esac
        done
    done
}

# list tables
ListTables(){
	output=$(ls ./$connectedDbs | grep -v ".meta")
			if [[ $output ]]
			then
				echo $output
			else
				echo "No tables exists yet. "
			fi


}
# insert table
insertIntoTable() {
    local db_dir="$connectedDbs"
    local tablename
    local table_file
    local schema_file
    local col_names=()
    local col_types=()
    local pk_col
    local data
    local pk_value
    local valid

    read -p "Enter the name of the table to insert into: " tablename
    tablename=$(echo "$tablename" | tr ' ' '_')

    table_file="$db_dir/$tablename"
    schema_file="$db_dir/$tablename.meta"

    # Check if table exists
    if [ ! -e "$table_file" ]; then
        echo "Table does not exist!"
        return
    fi

     while IFS=: read -r col_name col_type; do
        # Trim leading and trailing whitespace from column name and type
        col_name=$(echo "$col_name" | xargs)
        col_type=$(echo "$col_type" | xargs)

        # Debugging output
        #echo "Read schema line: '$col_name:$col_type'"

        # Handle primary key
        if [[ "$col_name" == primary_key* ]]; then
          	# pk_col=$(grep "primary_key" ./$schema_file | cut -d ":" -f 2)
            pk_col=$col_type
        else
            col_names+=("$col_name")
            col_types+=("$col_type")
        fi
    done < "$schema_file"

    # Prompt user for data
    while true; do
        data=()
        valid=true
        
        for i in "${!col_names[@]}"; do
            read -p "Enter value for ${col_names[$i]} (${col_types[$i]}): " value
            
            # Validate data
            case "${col_types[$i]}" in
                int)
					if [[ $((value)) != $value ]]; then
					        echo "Error: Value '$value' is not a valid integer for column '${col_names[$i]}'."
                    		valid=false
                    		break
					fi
                    ;;
                string)
                    if [ -z $value ]
                    then
                        echo "empty input,try again."
                        valid=false
                        break
                    else
                        if [[ ! $value =~ [a-zA-Z]* ]]
                        then
                            echo "invalid string."
                            valid=false
                            break
                        fi
                    fi
                    ;;
                *)
                    echo "Error: Unknown data type '${col_types[$i]}' for column '${col_names[$i]}'."
                    valid=false
                    break
                    ;;
            esac
            data+=("$value")
        done
        
        if [ "$valid" = true ]; then
            # Check if primary key value is unique
            if [[ -n "$pk_col" ]]; then
                echo "${col_names[@]}"
                pk_index=$(echo "${col_names[@]}" | tr ' ' '\n' | grep -n "^$pk_col$" | cut -d: -f1)
                echo "$pk_index"
                pk_value="${data[$((pk_index - 1))]}"

                echo "Checking for primary key value: $pk_col:$pk_value"

                if grep "${pk_col}:${pk_value}" "$table_file"; then
                    echo "Error: Primary key value '$pk_value' already exists."
                    continue
                fi
            fi

            line=""
            for i in "${!col_names[@]}"
            do
                line+="${col_names[$i]}:${data[$i]},"
            done
            # Remove the trailing comma
            line=${line%,}
            echo "$line"
            echo "$line" >> "$table_file"
            
            echo "Data inserted successfully."
        fi

        read -p "Do you want to insert more rows? (yes/no): " more
        if [[ "$more" != "yes" ]]; then
            echo "Finished inserting rows."
            return
        fi
    done
}
# Function to select data from the table
selectFromTable() {
    local db_dir="$connectedDbs"
    local tablename
    local table_file
    local schema_file
    local col_names=()
    local col_types=()
    local pk_col
    local select_option
    local column
    local value
    local output

    read -p "Enter the name of the table to select from: " tablename

    if [ -z "$tablename" ]; then
        return
    fi

    tablename=$(echo "$tablename" | tr ' ' '_')

    table_file="$db_dir/$tablename"
    schema_file="$db_dir/$tablename.meta"

    if [ ! -e "$table_file" ]; then
        echo "Table '$tablename' does not exist!"
        return
    fi

    if [ ! -e "$schema_file" ]; then
        echo "Schema file for table '$tablename' does not exist!"
        return
    fi

    # Read schema file to get column names and types
    while IFS=: read -r col_name col_type; do
        if [[ "$col_name" == primary_key* ]]; then
            pk_col=$col_type
        else
            col_names+=("$col_name")
            col_types+=("$col_type")
        fi
    done < "$schema_file"

    # Debugging: Print column names and types
    echo "Column Names: ${col_names[@]}"
    echo "Column Types: ${col_types[@]}"

    PS3="Select an option: "
    options=("Select All Rows" "Select by Column" "Back to Main Menu")
    select select_option in "${options[@]}"; do
        case "$select_option" in
            "Select All Rows")
                output=$(cat "$table_file")
                if [[ -n "$output" ]]; then
                    echo -e "All Rows:\n$output"
                else
                    echo "No data found in the table."
                fi
                ;;
            "Select by Column")
                select_column_menu
                ;;
            "Back to Main Menu")
                return
                ;;
            *)
                echo "Invalid option. Please select a valid option."
                ;;
        esac
    done
}
select_column_menu() {
    PS3="Select a column to filter by: "
    select column in "${col_names[@]}"; do
        if [ -n "$column" ]; then
            read -p "Enter the value to select by (Column: $column): " value
            if [ -n "$value" ]; then
                echo "Selected Column: $column, Value: $value"
                output=$(grep "$column:$value" "$table_file")
                if [[ -n "$output" ]]; then
                    echo -e "Matching Rows:\n$output"
                else
                    echo "No matching rows found."
                fi
            else
                echo "Invalid input. Value cannot be empty."
            fi
            break
        else
            echo "Invalid column selection. Please select a valid column."
        fi
    done
}
# Function to update data in the table for a selected column
updateTable() {
    local db_dir="$connectedDbs"
    local tablename
    local table_file
    local schema_file
    local col_names=()
    local col_types=()
    local pk_col
    local update_col
    local update_val
    local pk_val
    local line
    local temp_file="/tmp/update_temp.$$"

    while true; do
        read -p "Enter the name of the table to update: " tablename
        if ! validateArgument "$tablename"; then
            continue
        fi
        tablename=$(echo "$tablename" | tr ' ' '_')

        table_file="$db_dir/$tablename"
        schema_file="$db_dir/$tablename.meta"

        # Check if table exists
        if [ ! -e "$table_file" ]; then
            echo "Table '$tablename' does not exist!"
            continue
        fi

        # Read schema to get column names and types
        while IFS=: read -r col_name col_type; do
            # Trim leading and trailing whitespace from column name and type
            col_name=$(echo "$col_name" | xargs)
            col_type=$(echo "$col_type" | xargs)

            # Handle primary key
            if [[ "$col_name" == primary_key* ]]; then
                pk_col=$col_type
            else
                col_names+=("$col_name")
                col_types+=("$col_type")
            fi
        done < "$schema_file"

        break
    done

    # Prompt user for primary key value to update
    while true; do
        read -p "Enter the value of the primary key to update: " pk_val
        # Check if the primary key value exists in the table
        if ! grep -q "${pk_col}:${pk_val}" "$table_file"; then
            echo "Primary key value '$pk_val' does not exist in the table."
            continue
        else
            break
        fi
    done

    # Prompt user for column to update
    while true; do
        read -p "Enter the column name to update: " update_col
        if ! validateArgument "$update_col"; then
            continue
        fi
        # Validate column name and ensure it's not the primary key column
        if [[ " ${col_names[@]} " =~ " $update_col " && "$update_col" != "$pk_col" ]]; then
            break
        else
            if [[ "$update_col" == "$pk_col" ]]; then
                echo "Error: Updating the primary key column '$pk_col' directly is not allowed."
            else
                echo "Column '$update_col' does not exist in the table or cannot be updated."
            fi
            continue
        fi
    done

    # Prompt user for new value
    read -p "Enter the new value for column '$update_col': " update_val

    # Perform the update operation
    awk -v col_name="$update_col" -v col_val="$update_val" -v pk_col="$pk_col" -v pk_val="$pk_val" -F ',' '{
        if ($1 == pk_col ":" pk_val) {
            for (i = 2; i <= NF; i++) {
                split($i, arr, ":")
                if (arr[1] == col_name) {
                    $i = col_name ":" col_val
                    break
                }
            }
        }
        print $0
    }' "$table_file" > "$temp_file" && mv "$temp_file" "$table_file"

    echo "Updated column '$update_col' with value '$update_val' where primary key '$pk_col' is '$pk_val'."
    echo "Update Success."
}



deleteFromTable() {
    local db_dir="$connectedDbs"
    local table_file
    local schema_file
    local col_names=()
    local col_types=()
    local pk_col
    local value
    local pk_value

    tablename=""
    read -p "Enter the name of the table to delete from: " tablename
    tablename=$(echo "$tablename" | tr ' ' '_')

    table_file="$db_dir/$tablename"
    schema_file="$db_dir/$tablename.meta"

    # Check if table exists
    if [ -z "$tablename" ]
    then
        echo "Empty input"
        return
    fi
    if [ ! -e "$table_file" ]; then
        echo "Table does not exist!"
        return
    fi

    # Read schema file and determine the columns and types
    while IFS=: read -r col_name col_type; do
        if [[ "$col_name" == primary_key* ]]; then
            pk_col="${col_type}"
        else
            col_names+=("$col_name")
            col_types+=("$col_type")
        fi
    done < "$schema_file"

    # Display menu options
    echo "Select deletion option:"
    echo "1) Delete by ID (Primary Key)"
    echo "2) Delete by Column"
    echo "3) Delete All Rows"
    read -p "Enter your choice (1/2/3): " delete_option

    case "$delete_option" in
    1)
        # Delete by ID (Primary Key)
        if [[ -z "$pk_col" ]]; then
            echo "Error: No primary key defined for this table."
            return
        fi
        
        read -p "Enter the primary key value to delete: " pk_value

        deletedRow="$pk_col:$pk_value"
        tableFile="./$connectedDbs/$tablename"
        
        grep "$deletedRow" $tableFile
        if [ $? == 1 ]; then
            echo "No matching rows found to delete."
            return
        fi

        sed -i "/$deletedRow/d" "$tableFile"        
        echo "Matching rows has been Deleted."
        ;;
    2)
        # Delete by Column
        read -p "Enter the column name to filter by: " column_name

        if [[ ! " ${col_names[@]} " =~ " $column_name " ]]; then
                echo "Error: Column '$column_name' does not exist."
                return
        fi

        read -p "Enter the value to filter by: " value

        # Validate the value based on the column type
        column_index=$(echo "${col_names[@]}" | tr ' ' '\n' | grep -n "^$column_name$" | cut -d: -f1)
        column_index=$((column_index - 1))
        column_type="${col_types[$column_index]}"

        case "$column_type" in
            int)
                if ! [[ "$value" =~ ^[0-9]+$ ]]; then
                    echo "Error: Value for column '$column_name' must be an integer."
                    return
                fi
                ;;
            string)
                if [[ -z "$value" ]]; then
                    echo "Error: Value for column '$column_name' must not be empty."
                    return
                fi
                ;;
            *)
                echo "Error: Unknown data type for column '$column_name'."
                return
                ;;
        esac


        deletedRow="$column_name:$value"
        tableFile="./$connectedDbs/$tablename"
        
        grep "$deletedRow" $tableFile
        if [ $? == 1 ]; then
            echo "No matching rows found to delete."
            return
        fi

        sed -i "/$deletedRow/d" "$tableFile"        
        echo "Matching rows has been Deleted."
    ;;
    3)
        # Delete All Rows
        > "$table_file"
        echo "All rows have been deleted."
        return
        ;;
    *)
        echo "Invalid option selected."
        return
        ;;
    esac
}
#DropTable
DropTable(){
		read -p "Enter the name of the table you want to drop: " tablename
		
		tablename=$(echo "$tablename" | tr ' ' '_')

	    if [[ ! "$tablename" =~ ^[a-zA-Z][a-zA-Z0-9_]*$ ]]; then
		echo "Invalid table name. It should start with a letter and contain only letters, numbers, and underscores."
		return
	    fi
		if [ -z $tablename ]
		then
			echo "Empty input."
		else
			if [ -f ./"$connectedDbs/$tablename" ]; then
				rm ./"$connectedDbs/$tablename"
				echo "Table '$tablename' has been deleted successfully."
			else
				echo "Table '$tablename' does not exist."
			fi
		fi

}

echo "Hello in your $connectedDbs database what would you like to do: "
select command in CreateTable ListTables DropTable InsertIntoTables SelectTable UpdateTable DeleteFromTable QuitFromDB
do
case $command in 
"CreateTable" )
	       createTable
    ;;
"ListTables")
		ListTables
;;
"DropTable")
	DropTable
	;;
"InsertIntoTables")
	   insertIntoTable
;;

"SelectTable")
             selectFromTable
;;


"UpdateTable")
             updateTable

;;
"DeleteFromTable")
                 deleteFromTable
;;
"QuitFromDB")
	echo "Exiting from $connectedDbs database. "
	     break
	     
	     
;;
*)
echo "Invalid Selection"
esac
done
callDBManagementSystem
